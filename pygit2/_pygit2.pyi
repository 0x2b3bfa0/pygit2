from typing import Any, ClassVar, Iterator

import _pygit2
import pygit2
GIT_APPLY_LOCATION_BOTH: int
GIT_APPLY_LOCATION_INDEX: int
GIT_APPLY_LOCATION_WORKDIR: int
GIT_BLAME_FIRST_PARENT: int
GIT_BLAME_IGNORE_WHITESPACE: int
GIT_BLAME_NORMAL: int
GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES: int
GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES: int
GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES: int
GIT_BLAME_TRACK_COPIES_SAME_FILE: int
GIT_BLAME_USE_MAILMAP: int
GIT_BRANCH_ALL: int
GIT_BRANCH_LOCAL: int
GIT_BRANCH_REMOTE: int
GIT_CHECKOUT_ALLOW_CONFLICTS: int
GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH: int
GIT_CHECKOUT_DONT_UPDATE_INDEX: int
GIT_CHECKOUT_FORCE: int
GIT_CHECKOUT_NONE: int
GIT_CHECKOUT_NO_REFRESH: int
GIT_CHECKOUT_RECREATE_MISSING: int
GIT_CHECKOUT_REMOVE_IGNORED: int
GIT_CHECKOUT_REMOVE_UNTRACKED: int
GIT_CHECKOUT_SAFE: int
GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES: int
GIT_CHECKOUT_UPDATE_ONLY: int
GIT_CONFIG_LEVEL_GLOBAL: int
GIT_CONFIG_LEVEL_LOCAL: int
GIT_CONFIG_LEVEL_SYSTEM: int
GIT_CONFIG_LEVEL_XDG: int
GIT_DELTA_ADDED: int
GIT_DELTA_CONFLICTED: int
GIT_DELTA_COPIED: int
GIT_DELTA_DELETED: int
GIT_DELTA_IGNORED: int
GIT_DELTA_MODIFIED: int
GIT_DELTA_RENAMED: int
GIT_DELTA_TYPECHANGE: int
GIT_DELTA_UNMODIFIED: int
GIT_DELTA_UNREADABLE: int
GIT_DELTA_UNTRACKED: int
GIT_DESCRIBE_ALL: int
GIT_DESCRIBE_DEFAULT: int
GIT_DESCRIBE_TAGS: int
GIT_DIFF_BREAK_REWRITES: int
GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY: int
GIT_DIFF_DISABLE_PATHSPEC_MATCH: int
GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS: int
GIT_DIFF_FIND_ALL: int
GIT_DIFF_FIND_AND_BREAK_REWRITES: int
GIT_DIFF_FIND_BY_CONFIG: int
GIT_DIFF_FIND_COPIES: int
GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED: int
GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE: int
GIT_DIFF_FIND_EXACT_MATCH_ONLY: int
GIT_DIFF_FIND_FOR_UNTRACKED: int
GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE: int
GIT_DIFF_FIND_IGNORE_WHITESPACE: int
GIT_DIFF_FIND_REMOVE_UNMODIFIED: int
GIT_DIFF_FIND_RENAMES: int
GIT_DIFF_FIND_RENAMES_FROM_REWRITES: int
GIT_DIFF_FIND_REWRITES: int
GIT_DIFF_FLAG_BINARY: int
GIT_DIFF_FLAG_EXISTS: int
GIT_DIFF_FLAG_NOT_BINARY: int
GIT_DIFF_FLAG_VALID_ID: int
GIT_DIFF_FORCE_BINARY: int
GIT_DIFF_FORCE_TEXT: int
GIT_DIFF_IGNORE_CASE: int
GIT_DIFF_IGNORE_FILEMODE: int
GIT_DIFF_IGNORE_SUBMODULES: int
GIT_DIFF_IGNORE_WHITESPACE: int
GIT_DIFF_IGNORE_WHITESPACE_CHANGE: int
GIT_DIFF_IGNORE_WHITESPACE_EOL: int
GIT_DIFF_INCLUDE_CASECHANGE: int
GIT_DIFF_INCLUDE_IGNORED: int
GIT_DIFF_INCLUDE_TYPECHANGE: int
GIT_DIFF_INCLUDE_TYPECHANGE_TREES: int
GIT_DIFF_INCLUDE_UNMODIFIED: int
GIT_DIFF_INCLUDE_UNREADABLE: int
GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED: int
GIT_DIFF_INCLUDE_UNTRACKED: int
GIT_DIFF_INDENT_HEURISTIC: int
GIT_DIFF_MINIMAL: int
GIT_DIFF_NORMAL: int
GIT_DIFF_PATIENCE: int
GIT_DIFF_RECURSE_IGNORED_DIRS: int
GIT_DIFF_RECURSE_UNTRACKED_DIRS: int
GIT_DIFF_REVERSE: int
GIT_DIFF_SHOW_BINARY: int
GIT_DIFF_SHOW_UNMODIFIED: int
GIT_DIFF_SHOW_UNTRACKED_CONTENT: int
GIT_DIFF_SKIP_BINARY_CHECK: int
GIT_DIFF_STATS_FULL: int
GIT_DIFF_STATS_INCLUDE_SUMMARY: int
GIT_DIFF_STATS_NONE: int
GIT_DIFF_STATS_NUMBER: int
GIT_DIFF_STATS_SHORT: int
GIT_DIFF_UPDATE_INDEX: int
GIT_FILEMODE_BLOB: int
GIT_FILEMODE_BLOB_EXECUTABLE: int
GIT_FILEMODE_COMMIT: int
GIT_FILEMODE_LINK: int
GIT_FILEMODE_TREE: int
GIT_MERGE_ANALYSIS_FASTFORWARD: int
GIT_MERGE_ANALYSIS_NONE: int
GIT_MERGE_ANALYSIS_NORMAL: int
GIT_MERGE_ANALYSIS_UNBORN: int
GIT_MERGE_ANALYSIS_UP_TO_DATE: int
GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY: int
GIT_MERGE_PREFERENCE_NONE: int
GIT_MERGE_PREFERENCE_NO_FASTFORWARD: int
GIT_OBJ_ANY: int
GIT_OBJ_BLOB: int
GIT_OBJ_COMMIT: int
GIT_OBJ_TAG: int
GIT_OBJ_TREE: int
GIT_OID_HEXSZ: int
GIT_OID_HEX_ZERO: str
GIT_OID_MINPREFIXLEN: int
GIT_OID_RAWSZ: int
GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS: int
GIT_OPT_ENABLE_CACHING: int
GIT_OPT_ENABLE_FSYNC_GITDIR: int
GIT_OPT_ENABLE_OFS_DELTA: int
GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION: int
GIT_OPT_ENABLE_STRICT_OBJECT_CREATION: int
GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION: int
GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY: int
GIT_OPT_GET_CACHED_MEMORY: int
GIT_OPT_GET_MWINDOW_MAPPED_LIMIT: int
GIT_OPT_GET_MWINDOW_SIZE: int
GIT_OPT_GET_PACK_MAX_OBJECTS: int
GIT_OPT_GET_SEARCH_PATH: int
GIT_OPT_GET_TEMPLATE_PATH: int
GIT_OPT_GET_USER_AGENT: int
GIT_OPT_GET_WINDOWS_SHAREMODE: int
GIT_OPT_SET_ALLOCATOR: int
GIT_OPT_SET_CACHE_MAX_SIZE: int
GIT_OPT_SET_CACHE_OBJECT_LIMIT: int
GIT_OPT_SET_MWINDOW_MAPPED_LIMIT: int
GIT_OPT_SET_MWINDOW_SIZE: int
GIT_OPT_SET_PACK_MAX_OBJECTS: int
GIT_OPT_SET_SEARCH_PATH: int
GIT_OPT_SET_SSL_CERT_LOCATIONS: int
GIT_OPT_SET_SSL_CIPHERS: int
GIT_OPT_SET_TEMPLATE_PATH: int
GIT_OPT_SET_USER_AGENT: int
GIT_OPT_SET_WINDOWS_SHAREMODE: int
GIT_REF_INVALID: int
GIT_REF_LISTALL: int
GIT_REF_OID: int
GIT_REF_SYMBOLIC: int
GIT_RESET_HARD: int
GIT_RESET_MIXED: int
GIT_RESET_SOFT: int
GIT_REVPARSE_MERGE_BASE: int
GIT_REVPARSE_RANGE: int
GIT_REVPARSE_SINGLE: int
GIT_SORT_NONE: int
GIT_SORT_REVERSE: int
GIT_SORT_TIME: int
GIT_SORT_TOPOLOGICAL: int
GIT_STASH_APPLY_DEFAULT: int
GIT_STASH_APPLY_REINSTATE_INDEX: int
GIT_STASH_DEFAULT: int
GIT_STASH_INCLUDE_IGNORED: int
GIT_STASH_INCLUDE_UNTRACKED: int
GIT_STASH_KEEP_INDEX: int
GIT_STATUS_CONFLICTED: int
GIT_STATUS_CURRENT: int
GIT_STATUS_IGNORED: int
GIT_STATUS_INDEX_DELETED: int
GIT_STATUS_INDEX_MODIFIED: int
GIT_STATUS_INDEX_NEW: int
GIT_STATUS_INDEX_RENAMED: int
GIT_STATUS_INDEX_TYPECHANGE: int
GIT_STATUS_WT_DELETED: int
GIT_STATUS_WT_MODIFIED: int
GIT_STATUS_WT_NEW: int
GIT_STATUS_WT_RENAMED: int
GIT_STATUS_WT_TYPECHANGE: int
GIT_STATUS_WT_UNREADABLE: int
LIBGIT2_VERSION: str
LIBGIT2_VER_MAJOR: int
LIBGIT2_VER_MINOR: int
LIBGIT2_VER_REVISION: int

class AlreadyExistsError(ValueError): ...

class Blob(_pygit2.Object):
    data: ClassVar[getset_descriptor] = ...
    is_binary: ClassVar[getset_descriptor] = ...
    size: ClassVar[getset_descriptor] = ...
    def diff(self, blob: Blob = ..., flag: int = ..., old_as_path: str = ..., new_as_path: str = ...) -> Patch: ...
    def diff_to_buffer(self, buffer: bytes = ..., flag: int = ..., old_as_path: str = ..., buffer_as_path: str = ...) -> Patch: ...

class Branch(_pygit2.Reference):
    branch_name: ClassVar[getset_descriptor] = ...
    raw_branch_name: ClassVar[getset_descriptor] = ...
    remote_name: ClassVar[getset_descriptor] = ...
    upstream: ClassVar[getset_descriptor] = ...
    upstream_name: ClassVar[getset_descriptor] = ...
    def delete(self) -> Any: ...
    def is_checked_out(self) -> bool: ...
    def is_head(self) -> bool: ...
    def rename(self, name: str, force: bool = ...) -> Any: ...

class Commit(_pygit2.Object):
    author: ClassVar[getset_descriptor] = ...
    commit_time: ClassVar[getset_descriptor] = ...
    commit_time_offset: ClassVar[getset_descriptor] = ...
    committer: ClassVar[getset_descriptor] = ...
    gpg_signature: ClassVar[getset_descriptor] = ...
    message: ClassVar[getset_descriptor] = ...
    message_encoding: ClassVar[getset_descriptor] = ...
    message_trailers: ClassVar[getset_descriptor] = ...
    parent_ids: ClassVar[getset_descriptor] = ...
    parents: ClassVar[getset_descriptor] = ...
    raw_message: ClassVar[getset_descriptor] = ...
    tree: ClassVar[getset_descriptor] = ...
    tree_id: ClassVar[getset_descriptor] = ...

class Diff:
    deltas: ClassVar[getset_descriptor] = ...
    patch: ClassVar[getset_descriptor] = ...
    patchid: ClassVar[getset_descriptor] = ...
    stats: ClassVar[getset_descriptor] = ...
    def find_similar(self, flags: int = ..., rename_threshold: int = ..., copy_threshold: int = ..., rename_from_rewrite_threshold: int = ..., break_rewrite_threshold: int = ..., rename_limit: int = ...) -> Any: ...
    def from_c(self, *args, **kwargs) -> Any: ...
    def merge(self, diff: Diff) -> Any: ...
    def parse_diff(self, *args, **kwargs) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...

class DiffDelta:
    flags: ClassVar[member_descriptor] = ...
    is_binary: ClassVar[getset_descriptor] = ...
    new_file: ClassVar[member_descriptor] = ...
    nfiles: ClassVar[member_descriptor] = ...
    old_file: ClassVar[member_descriptor] = ...
    similarity: ClassVar[member_descriptor] = ...
    status: ClassVar[member_descriptor] = ...
    def status_char(self) -> str: ...

class DiffFile:
    flags: ClassVar[member_descriptor] = ...
    id: ClassVar[member_descriptor] = ...
    mode: ClassVar[member_descriptor] = ...
    path: ClassVar[member_descriptor] = ...
    raw_path: ClassVar[member_descriptor] = ...
    size: ClassVar[member_descriptor] = ...

class DiffHunk:
    header: ClassVar[getset_descriptor] = ...
    lines: ClassVar[getset_descriptor] = ...
    new_lines: ClassVar[getset_descriptor] = ...
    new_start: ClassVar[getset_descriptor] = ...
    old_lines: ClassVar[getset_descriptor] = ...
    old_start: ClassVar[getset_descriptor] = ...

class DiffLine:
    content: ClassVar[getset_descriptor] = ...
    content_offset: ClassVar[getset_descriptor] = ...
    new_lineno: ClassVar[getset_descriptor] = ...
    num_lines: ClassVar[getset_descriptor] = ...
    old_lineno: ClassVar[getset_descriptor] = ...
    origin: ClassVar[getset_descriptor] = ...
    raw_content: ClassVar[getset_descriptor] = ...

class DiffStats:
    deletions: ClassVar[getset_descriptor] = ...
    files_changed: ClassVar[getset_descriptor] = ...
    insertions: ClassVar[getset_descriptor] = ...
    def format(self, format: int, width: int) -> str: ...

class GitError(Exception): ...

class InvalidSpecError(ValueError): ...

class Mailmap:
    def __init__(self, *args, **kwargs) -> None: ...
    def add_entry(self, real_name: str = ..., real_email: str = ..., replace_name: str = ..., replace_email: str = ...) -> Any: ...
    def from_buffer(self, *args, **kwargs) -> Any: ...
    def from_repository(self, *args, **kwargs) -> Any: ...
    def resolve(self, name: str, email: str) -> tuple[str,str]: ...
    def resolve_signature(self, sig: Signature) -> Signature: ...

class Note:
    annotated_id: ClassVar[member_descriptor] = ...
    id: ClassVar[member_descriptor] = ...
    message: ClassVar[getset_descriptor] = ...
    def remove(self, author: Signature, committer: Signature, ref: str = ...) -> Any: ...

class Object:
    _pointer: ClassVar[getset_descriptor] = ...
    filemode: ClassVar[getset_descriptor] = ...
    hex: ClassVar[getset_descriptor] = ...
    id: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    oid: ClassVar[getset_descriptor] = ...
    raw_name: ClassVar[getset_descriptor] = ...
    short_id: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    type_str: ClassVar[getset_descriptor] = ...
    def peel(self, target_type) -> Object: ...
    def read_raw(self) -> bytes: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Odb:
    backends: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add_backend(self, backend: OdbBackend, priority: int) -> Any: ...
    def add_disk_alternate(self, path: str) -> Any: ...
    def exists(self, oid: Oid) -> bool: ...
    def read(self, *args, **kwargs) -> Any: ...
    def write(self, type: int, data: bytes) -> Oid: ...
    def __contains__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...

class OdbBackend:
    def __init__(self, *args, **kwargs) -> None: ...
    def exists(self, oid: str | Oid) -> bool: ...
    def exists_prefix(self, partial_id: str | Oid) -> Oid: ...
    def read(self, *args, **kwargs) -> Any: ...
    def read_header(self, *args, **kwargs) -> Any: ...
    def read_prefix(self, *args, **kwargs) -> Any: ...
    def refresh(self) -> Any: ...
    def __iter__(self) -> Any: ...

class OdbBackendLoose(_pygit2.OdbBackend):
    def __init__(self, *args, **kwargs) -> None: ...

class OdbBackendPack(_pygit2.OdbBackend):
    def __init__(self, *args, **kwargs) -> None: ...

class Oid:
    hex: ClassVar[getset_descriptor] = ...
    raw: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Patch:
    data: ClassVar[getset_descriptor] = ...
    delta: ClassVar[getset_descriptor] = ...
    hunks: ClassVar[getset_descriptor] = ...
    line_stats: ClassVar[getset_descriptor] = ...
    text: ClassVar[getset_descriptor] = ...
    def create_from(self, *args, **kwargs) -> Any: ...

class RefLogEntry:
    committer: ClassVar[getset_descriptor] = ...
    message: ClassVar[member_descriptor] = ...
    oid_new: ClassVar[member_descriptor] = ...
    oid_old: ClassVar[member_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Refdb:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def compress(self) -> Any: ...
    def new(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def set_backend(self, backend: RefdbBackend) -> Any: ...

class RefdbBackend:
    def __init__(self, *args, **kwargs) -> None: ...
    def compress(self) -> Any: ...
    def delete(self, ref_name: str, old_id: Oid, old_target: str) -> Any: ...
    def ensure_log(self, ref_name: str) -> Any: ...
    def exists(self, refname: str) -> Any: ...
    def has_log(self, ref_name: str) -> Any: ...
    def lookup(self, refname: str) -> Reference: ...
    def rename(self, old_name: str, new_name: str, force: bool, who: Signature, message: str) -> Any: ...
    def write(self, ref: Reference, force: bool, who: Signature, message: str, old: Oid, old_target: str) -> Any: ...

class RefdbFsBackend(_pygit2.RefdbBackend):
    def __init__(self, *args, **kwargs) -> None: ...

class Reference:
    name: ClassVar[getset_descriptor] = ...
    raw_name: ClassVar[getset_descriptor] = ...
    raw_shorthand: ClassVar[getset_descriptor] = ...
    raw_target: ClassVar[getset_descriptor] = ...
    shorthand: ClassVar[getset_descriptor] = ...
    target: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def delete(self) -> Any: ...
    def log(self) -> RefLogIter: ...
    def peel(self, type = ...) -> Object: ...
    def rename(self, new_name: str) -> Any: ...
    def resolve(self) -> Reference: ...
    def set_target(self, target, message: str = ...) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Repository:
    _pointer: ClassVar[getset_descriptor] = ...
    default_signature: ClassVar[getset_descriptor] = ...
    head: ClassVar[getset_descriptor] = ...
    head_is_detached: ClassVar[getset_descriptor] = ...
    head_is_unborn: ClassVar[getset_descriptor] = ...
    is_bare: ClassVar[getset_descriptor] = ...
    is_empty: ClassVar[getset_descriptor] = ...
    is_shallow: ClassVar[getset_descriptor] = ...
    odb: ClassVar[getset_descriptor] = ...
    path: ClassVar[getset_descriptor] = ...
    refdb: ClassVar[getset_descriptor] = ...
    workdir: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def TreeBuilder(self, *args, **kwargs) -> Any: ...
    def _disown(self, *args, **kwargs) -> Any: ...
    def _from_c(self, *args, **kwargs) -> Any: ...
    def add_worktree(self, name: str, path: str, ref: Reference = ...) -> Worktree: ...
    def applies(self, diff: Diff, location: int = ...) -> bool: ...
    def apply(self, diff: Diff, location: int = ...) -> Any: ...
    def cherrypick(self, id: Oid) -> Any: ...
    def compress_references(self) -> Any: ...
    def create_blob(self, data: bytes) -> Oid: ...
    def create_blob_fromdisk(self, path: str) -> Oid: ...
    def create_blob_fromiobase(self, *args, **kwargs) -> Any: ...
    def create_blob_fromworkdir(self, path: str) -> Oid: ...
    def create_branch(self, name: str, commit: Commit, force = ...) -> Branch: ...
    def create_commit(self, reference_name: str, author: Signature, committer: Signature, message: str, tree: Oid, parents: list[Oid], encoding: str = ...) -> Oid: ...
    def create_note(self, message: str, author: Signature, committer: Signature, annotated_id: str, ref: str = ..., force: bool = ...) -> Oid: ...
    def create_reference_direct(self, name: str, target, force = ..., message: str = ...) -> Reference: ...
    def create_reference_symbolic(self, name, source, force, message = ...) -> Reference: ...
    def create_tag(self, name: str, oid: Oid, type: int, tagger: Signature, message: str) -> Oid: ...
    def descendant_of(self, oid1: Oid, oid2: Oid) -> bool: ...
    def expand_id(self, hex: str) -> Oid: ...
    def free(self) -> Any: ...
    def git_object_lookup_prefix(self, oid: Oid) -> Object: ...
    def init_submodules(self, submodules: list[pygit2.Submodule] = ..., overwrite = ...) -> Any: ...
    def list_worktrees(self) -> list[str]: ...
    def listall_branches(self, flag: int = ...) -> list[str]: ...
    def listall_reference_objects(self) -> list[Reference]: ...
    def listall_references(self) -> list[str]: ...
    def listall_stashes(self) -> list[Stash]: ...
    def listall_submodules(self) -> list[str]: ...
    def lookup_branch(self, branch_name: str, branch_type: int = ...) -> Branch: ...
    def lookup_note(self, annotated_id: str, ref: str = ...) -> Note: ...
    def lookup_reference(self, name: str) -> Reference: ...
    def lookup_reference_dwim(self, name: str) -> Reference: ...
    def lookup_worktree(self, name: str) -> Worktree: ...
    def merge(self, id: Oid) -> Any: ...
    def merge_analysis(self, their_head: Oid, our_ref: str = ...) -> tuple[int,int]: ...
    def merge_base(self, oid1: Oid, oid2: Oid) -> Oid: ...
    def merge_base_many(self, oids: list[Oid]) -> Oid: ...
    def merge_base_octopus(self, oids: list[Oid]) -> Oid: ...
    def notes(self, *args, **kwargs) -> Any: ...
    def path_is_ignored(self, path: str) -> bool: ...
    def raw_listall_branches(self, flag: int = ...) -> list[bytes]: ...
    def raw_listall_references(self) -> list[bytes]: ...
    def reset(self, oid: Oid, reset_type: int) -> Any: ...
    def revparse(self, revspec: str) -> RevSpec: ...
    def revparse_ext(self, revision: str) -> tuple[Object,Reference]: ...
    def revparse_single(self, revision: str) -> Object: ...
    def set_odb(self, odb: Odb) -> Any: ...
    def set_refdb(self, refdb: Refdb) -> Any: ...
    def status(self) -> dict[str,int]: ...
    def status_file(self, path: str) -> int: ...
    def walk(self, oid: Oid, sort_mode: int = ...) -> Walker: ...

class RevSpec:
    flags: ClassVar[getset_descriptor] = ...
    from_object: ClassVar[getset_descriptor] = ...
    to_object: ClassVar[getset_descriptor] = ...

class Signature:
    _encoding: ClassVar[getset_descriptor] = ...
    _pointer: ClassVar[getset_descriptor] = ...
    email: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    offset: ClassVar[getset_descriptor] = ...
    raw_email: ClassVar[getset_descriptor] = ...
    raw_name: ClassVar[getset_descriptor] = ...
    time: ClassVar[getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Stash:
    commit_id: ClassVar[getset_descriptor] = ...
    message: ClassVar[getset_descriptor] = ...
    raw_message: ClassVar[getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Tag(_pygit2.Object):
    message: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    raw_message: ClassVar[getset_descriptor] = ...
    raw_name: ClassVar[getset_descriptor] = ...
    tagger: ClassVar[getset_descriptor] = ...
    target: ClassVar[getset_descriptor] = ...
    def get_object(self) -> object: ...

class Tree(_pygit2.Object):
    def diff_to_index(self, index: Index, flags: int = ..., context_lines: int = ..., interhunk_lines: int = ...) -> Diff: ...
    def diff_to_tree(self, tree: Tree = ..., flags: int = ..., context_lines: int = ..., interhunk_lines: int = ..., swap: bool = ...) -> Diff: ...
    def diff_to_workdir(self, flags: int = ..., context_lines: int = ..., interhunk_lines: int = ...) -> Diff: ...
    def __contains__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class TreeBuilder:
    def clear(self) -> Any: ...
    def get(self, name: str) -> Object: ...
    def insert(self, name: str, oid: Oid, attr: int) -> Any: ...
    def remove(self, name: str) -> Any: ...
    def write(self) -> Oid: ...
    def __len__(self) -> Any: ...

class Walker:
    def hide(self, oid: Oid) -> Any: ...
    def push(self, oid: Oid) -> Any: ...
    def reset(self) -> Any: ...
    def simplify_first_parent(self) -> Any: ...
    def sort(self, mode: int) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class Worktree:
    is_prunable: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    path: ClassVar[getset_descriptor] = ...
    def prune(self, force = ...) -> Any: ...

def discover_repository(path: str, across_fs: bool = ..., ceiling_dirs: str = ...) -> str: ...
def hash(data: bytes) -> Oid: ...
def hashfile(path: str) -> Oid: ...
def init_file_backend(path: str, flags: int = ...) -> object: ...
def option(*args, **kwargs) -> Any: ...
def reference_is_valid_name(refname: str) -> bool: ...
def tree_entry_cmp(a: Object, b: Object) -> int: ...
