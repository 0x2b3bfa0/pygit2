name: Wheels

on:
  push:
    branches:
    - master
    tags:
    - 'v*'

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3

      - uses: docker/setup-qemu-action@v2
        if: runner.os == 'Linux'
        with:
          platforms: all

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.15.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BEFORE_ALL: sh build.sh
          CIBW_ENVIRONMENT: LIBGIT2_VERSION=1.7.1 LIBSSH2_VERSION=1.11.0 OPENSSL_VERSION=3.1.3 LIBGIT2=/project/ci
          CIBW_ENVIRONMENT_MACOS: LIBGIT2_VERSION=1.7.1 LIBSSH2_VERSION=1.11.0 OPENSSL_VERSION=3.1.3 LIBGIT2=/Users/runner/work/pygit2/pygit2/ci
          CIBW_SKIP: "*musl* pp3*"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "LD_LIBRARY_PATH=/project/ci/lib64 auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "DYLD_LIBRARY_PATH=/Users/runner/work/pygit2/pygit2/ci/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}"
          CIBW_ARCHS_MACOS: universal2
          CIBW_ARCHS_LINUX: x86_64 aarch64

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build_wheels]
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wheels
        path: dist

    - name: Display structure of downloaded files
      run: ls -lh dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
